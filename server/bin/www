#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('digitalwave:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '4001');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var io = require('socket.io')(server);



/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}


/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}


// Pass in a connection
io.on('connection', function (socket) {
  var colors = ['#fcd006', '#f36717'];
  total_length = colors.length - 1;
  section = 0;
  /**
   * Change the color from the array,
   * @param {Array} Array of colors
   * @param {Integer} section_id The started array of the section id
   * @param {io Socket} Socket
   */
  function changeColor(colors, section_id, socket) {
    total_length = colors.length;
    hex_color = colors[(section_id % total_length)];
    socket.emit('colorchange', {color: hex_color});
    section_id = (section_id + 1) % total_length;
    // TODO: Add a killswitch somehow.
    setTimeout(function() {
      changeColor(colors, section_id, socket);
    },1000);
  }
  // Start broadcasting the color.
  changeColor(colors, section , socket);

  //socket.emit('colorchange', { color: 'blue' });
})